// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RapidOrder.Infrastructure;

#nullable disable

namespace RapidOrder.Infrastructure.Migrations
{
    [DbContext(typeof(RapidOrderDbContext))]
    [Migration("20251004082546_AddAssignmentsAndBreak")]
    partial class AddAssignmentsAndBreak
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("RapidOrder.Core.Entities.ActionMap", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("ButtonNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("MissionType")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceCode", "ButtonNumber")
                        .IsUnique();

                    b.ToTable("ActionMaps");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Authority", b =>
                {
                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Name");

                    b.HasIndex("UserId");

                    b.ToTable("Authority");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.CallButton", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ButtonId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<string>("Label")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("PlaceId");

                    b.ToTable("CallButtons");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.EventLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<long?>("MissionId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PayloadJson")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("MissionId");

                    b.HasIndex("PlaceId");

                    b.HasIndex("UserId");

                    b.ToTable("EventLogs");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Mission", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("AcknowledgedAt")
                        .HasColumnType("TEXT");

                    b.Property<long?>("AssignedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("FinishedAt")
                        .HasColumnType("TEXT");

                    b.Property<long?>("IdleTimeSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("MissionDurationSeconds")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlaceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlaceId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SetupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SourceButton")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SourceDecoded")
                        .HasMaxLength(64)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("PlaceGroupId");

                    b.HasIndex("SetupId");

                    b.HasIndex("PlaceId", "StartedAt");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Place", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PlaceGroupId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SetupId")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("UserId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("Number");

                    b.HasIndex("PlaceGroupId");

                    b.HasIndex("SetupId");

                    b.HasIndex("UserId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.PlaceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AssignedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<int?>("Number")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("SetupId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("SetupId");

                    b.ToTable("PlaceGroups");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Setting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Setup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Icon")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Setups");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.User", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("Activated")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ActivationKey")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("BreakStartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(254)
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsOnBreak")
                        .HasColumnType("INTEGER");

                    b.Property<string>("LangKey")
                        .HasMaxLength(10)
                        .HasColumnType("TEXT");

                    b.Property<string>("LastModifiedBy")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("LastModifiedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ResetDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResetKey")
                        .HasMaxLength(20)
                        .HasColumnType("TEXT");

                    b.Property<int>("Role")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Schedule")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Watch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("AssignedUserId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("BatteryPercent")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("LastSeenAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Serial")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.ToTable("Watches");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Authority", b =>
                {
                    b.HasOne("RapidOrder.Core.Entities.User", null)
                        .WithMany("Authorities")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.CallButton", b =>
                {
                    b.HasOne("RapidOrder.Core.Entities.Place", "Place")
                        .WithMany("CallButtons")
                        .HasForeignKey("PlaceId");

                    b.Navigation("Place");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.EventLog", b =>
                {
                    b.HasOne("RapidOrder.Core.Entities.Mission", "Mission")
                        .WithMany()
                        .HasForeignKey("MissionId");

                    b.HasOne("RapidOrder.Core.Entities.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId");

                    b.HasOne("RapidOrder.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Mission");

                    b.Navigation("Place");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Mission", b =>
                {
                    b.HasOne("RapidOrder.Core.Entities.User", "AssignedUser")
                        .WithMany("Missions")
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("RapidOrder.Core.Entities.PlaceGroup", "PlaceGroup")
                        .WithMany()
                        .HasForeignKey("PlaceGroupId");

                    b.HasOne("RapidOrder.Core.Entities.Place", "Place")
                        .WithMany("Missions")
                        .HasForeignKey("PlaceId");

                    b.HasOne("RapidOrder.Core.Entities.Setup", "Setup")
                        .WithMany()
                        .HasForeignKey("SetupId");

                    b.Navigation("AssignedUser");

                    b.Navigation("Place");

                    b.Navigation("PlaceGroup");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Place", b =>
                {
                    b.HasOne("RapidOrder.Core.Entities.PlaceGroup", "PlaceGroup")
                        .WithMany("Places")
                        .HasForeignKey("PlaceGroupId");

                    b.HasOne("RapidOrder.Core.Entities.Setup", "Setup")
                        .WithMany("Places")
                        .HasForeignKey("SetupId");

                    b.HasOne("RapidOrder.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("PlaceGroup");

                    b.Navigation("Setup");

                    b.Navigation("User");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.PlaceGroup", b =>
                {
                    b.HasOne("RapidOrder.Core.Entities.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.HasOne("RapidOrder.Core.Entities.Setup", "Setup")
                        .WithMany("PlaceGroups")
                        .HasForeignKey("SetupId");

                    b.Navigation("AssignedUser");

                    b.Navigation("Setup");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Watch", b =>
                {
                    b.HasOne("RapidOrder.Core.Entities.User", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId");

                    b.Navigation("AssignedUser");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Place", b =>
                {
                    b.Navigation("CallButtons");

                    b.Navigation("Missions");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.PlaceGroup", b =>
                {
                    b.Navigation("Places");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.Setup", b =>
                {
                    b.Navigation("PlaceGroups");

                    b.Navigation("Places");
                });

            modelBuilder.Entity("RapidOrder.Core.Entities.User", b =>
                {
                    b.Navigation("Authorities");

                    b.Navigation("Missions");
                });
#pragma warning restore 612, 618
        }
    }
}
